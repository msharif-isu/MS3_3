// Generated by view binder compiler. Do not edit!
package com.example.itinerarybuddy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.itinerarybuddy.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RegisterActivityBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView createAccountText;

  @NonNull
  public final EditText emailRegisterInput;

  @NonNull
  public final TextView emailText;

  @NonNull
  public final EditText passwordConfirmInput;

  @NonNull
  public final TextView passwordConfirmText;

  @NonNull
  public final EditText passwordRegisterInput;

  @NonNull
  public final TextView passwordRegisterText;

  @NonNull
  public final Button registerButton;

  @NonNull
  public final View registerGradient;

  @NonNull
  public final Button signInHereButton;

  @NonNull
  public final EditText usernameRegisterInput;

  @NonNull
  public final TextView usernameRegisterText;

  private RegisterActivityBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView createAccountText, @NonNull EditText emailRegisterInput,
      @NonNull TextView emailText, @NonNull EditText passwordConfirmInput,
      @NonNull TextView passwordConfirmText, @NonNull EditText passwordRegisterInput,
      @NonNull TextView passwordRegisterText, @NonNull Button registerButton,
      @NonNull View registerGradient, @NonNull Button signInHereButton,
      @NonNull EditText usernameRegisterInput, @NonNull TextView usernameRegisterText) {
    this.rootView = rootView;
    this.createAccountText = createAccountText;
    this.emailRegisterInput = emailRegisterInput;
    this.emailText = emailText;
    this.passwordConfirmInput = passwordConfirmInput;
    this.passwordConfirmText = passwordConfirmText;
    this.passwordRegisterInput = passwordRegisterInput;
    this.passwordRegisterText = passwordRegisterText;
    this.registerButton = registerButton;
    this.registerGradient = registerGradient;
    this.signInHereButton = signInHereButton;
    this.usernameRegisterInput = usernameRegisterInput;
    this.usernameRegisterText = usernameRegisterText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RegisterActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RegisterActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.register_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RegisterActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.create_account_text;
      TextView createAccountText = ViewBindings.findChildViewById(rootView, id);
      if (createAccountText == null) {
        break missingId;
      }

      id = R.id.email_register_input;
      EditText emailRegisterInput = ViewBindings.findChildViewById(rootView, id);
      if (emailRegisterInput == null) {
        break missingId;
      }

      id = R.id.email_text;
      TextView emailText = ViewBindings.findChildViewById(rootView, id);
      if (emailText == null) {
        break missingId;
      }

      id = R.id.password_confirm_input;
      EditText passwordConfirmInput = ViewBindings.findChildViewById(rootView, id);
      if (passwordConfirmInput == null) {
        break missingId;
      }

      id = R.id.password_confirm_text;
      TextView passwordConfirmText = ViewBindings.findChildViewById(rootView, id);
      if (passwordConfirmText == null) {
        break missingId;
      }

      id = R.id.password_register_input;
      EditText passwordRegisterInput = ViewBindings.findChildViewById(rootView, id);
      if (passwordRegisterInput == null) {
        break missingId;
      }

      id = R.id.password_register_text;
      TextView passwordRegisterText = ViewBindings.findChildViewById(rootView, id);
      if (passwordRegisterText == null) {
        break missingId;
      }

      id = R.id.register_button;
      Button registerButton = ViewBindings.findChildViewById(rootView, id);
      if (registerButton == null) {
        break missingId;
      }

      id = R.id.register_gradient;
      View registerGradient = ViewBindings.findChildViewById(rootView, id);
      if (registerGradient == null) {
        break missingId;
      }

      id = R.id.sign_in_here_button;
      Button signInHereButton = ViewBindings.findChildViewById(rootView, id);
      if (signInHereButton == null) {
        break missingId;
      }

      id = R.id.username_register_input;
      EditText usernameRegisterInput = ViewBindings.findChildViewById(rootView, id);
      if (usernameRegisterInput == null) {
        break missingId;
      }

      id = R.id.username_register_text;
      TextView usernameRegisterText = ViewBindings.findChildViewById(rootView, id);
      if (usernameRegisterText == null) {
        break missingId;
      }

      return new RegisterActivityBinding((ConstraintLayout) rootView, createAccountText,
          emailRegisterInput, emailText, passwordConfirmInput, passwordConfirmText,
          passwordRegisterInput, passwordRegisterText, registerButton, registerGradient,
          signInHereButton, usernameRegisterInput, usernameRegisterText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
